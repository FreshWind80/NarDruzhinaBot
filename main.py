from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
import os

TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("TARGET_CHAT_ID")

MESSAGE, ADDRESS, MEDIA = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    return MESSAGE

async def get_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["message"] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∞–¥—Ä–µ—Å:")
    return ADDRESS

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    keyboard = [["–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –º–µ–¥–∏–∞"]]
    await update.message.reply_text(
        "–•–æ—á–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return MEDIA

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = context.user_data.get("message", "")
    address = context.user_data.get("address", "")
    full_message = f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message}\nüìç –ê–¥—Ä–µ—Å:\n{address}"

    await context.bot.send_message(chat_id=CHAT_ID, text=full_message)
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –°–ø–∞—Å–∏–±–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_message)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            MEDIA: [MessageHandler(filters.ALL, handle_media)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()

async def debug_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"Chat ID: {update.effective_chat.id}")

app.add_handler(CommandHandler("debug", debug_chat))

